'use strict';

/**
 * @author palmtale
 * @since 2017/5/18.
 */

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _values = require('babel-runtime/core-js/object/values');

var _values2 = _interopRequireDefault(_values);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _http = require('http');

var _http2 = _interopRequireDefault(_http);

var _https = require('https');

var _https2 = _interopRequireDefault(_https);

var _querystring = require('querystring');

var _querystring2 = _interopRequireDefault(_querystring);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var promisefy = function promisefy(instance, method) {
    var methodImpl = method;
    if (_.isString(method)) {
        methodImpl = instance[method];
    }

    return function () {
        // For find arguments, arrow function is not OK.
        var args = Array.prototype.slice.call(arguments);
        return new _promise2.default(function (resolve, reject) {
            args.push(function (err) {
                for (var _len = arguments.length, result = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                    result[_key - 1] = arguments[_key];
                }

                if (err) {
                    reject(err);
                } else {
                    resolve(result);
                }
            });
            methodImpl.apply(instance, args);
        });
    };
};

var convertBodyAsContentType = function convertBodyAsContentType(body, headers) {
    if (!body) {
        headers['Content-length'] = 0;
        return ['', headers];
    }
    var finalHeaders = headers || {};
    var bodyString = '';
    if (!finalHeaders['Content-Type']) {
        finalHeaders['Content-Type'] = 'application/json;charset=utf-8';
    }
    if (finalHeaders['Content-Type'].indexOf('application/json') === 0) {
        bodyString = (0, _stringify2.default)(body);
    } else if (finalHeaders['Content-Type'].indexOf('application/x-www-form-urlencoded') === 0) {
        bodyString = _querystring2.default.stringify(body);
    }
    finalHeaders['Content-Length'] = Buffer.byteLength(bodyString);
    return [bodyString, finalHeaders];
};

var execute = function execute(http_library, options, post_body, callback) {
    var allowEarlyClose = options.host && options.host.match(/.*google(apis)?.com$/);

    var callbackCalled = false;

    var request = http_library.request(options);

    var passBackControl = function passBackControl(response, result) {
        if (!callbackCalled) {
            callbackCalled = true;
            if (!(response.statusCode >= 200 && response.statusCode <= 299) && response.statusCode !== 301 && response.statusCode !== 302) {
                callback({ statusCode: response.statusCode, data: result });
            } else {
                callback(null, result, response);
            }
        }
    };

    request.on('response', function (response) {
        var result = '';
        response.on('data', function (chunk) {
            result += chunk;
        });
        response.on('close', function () {
            if (allowEarlyClose) {
                passBackControl(response, result);
            }
        });
        response.addListener('end', function () {
            passBackControl(response, result);
        });
    });

    request.on('error', function (e) {
        callbackCalled = true;
        callback(e);
    });

    if ((options.method === 'POST' || options.method === 'PUT') && post_body) {
        request.write(post_body);
    }

    request.end();
};

var executeAsync = promisefy(null, execute);

var OAuth2Client = function () {
    function OAuth2Client(clientId, clientSecret, urlRoot, authorizePath, accessTokenPath) {
        var _this = this;

        (0, _classCallCheck3.default)(this, OAuth2Client);
        this._clientIdName = 'client_id';
        this._clientId = null;
        this._clientSecretName = 'client_secret';
        this._clientSecret = null;
        this._urlRoot = '';
        this._authorizeUrl = '/oauth/authorize';
        this._accessTokenUrl = '/oauth/access_token';
        this._accessTokenName = 'access_token';
        this._tokenType = 'Bearer';
        this._customHeaders = { accept: 'application/json' };
        this._authorizationInHeader = false;
        this._agent = undefined;
        this._responseType = 'code';
        this._redirectUri = null;
        this._type = '';
        this._key = '';

        this.addHeader = function (key, value) {
            _this._customHeaders[key] = value;
        };

        this.getAccessToken = function (token) {
            return _this._tokenType + ' ' + token;
        };

        this.request = function () {
            var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(method, url, params, body) {
                var parsedUrl, http_library, headers, key, query, queryStr, _convertBodyAsContent, _convertBodyAsContent2, bodyString, realHeaders, options;

                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                parsedUrl = _url2.default.parse(url, true);

                                if (parsedUrl.protocol === 'https:' && !parsedUrl.port) {
                                    parsedUrl.port = 443;
                                }
                                http_library = parsedUrl.protocol === 'https:' ? _https2.default : _http2.default;
                                /** Headers */

                                headers = {};

                                for (key in _this._customHeaders) {
                                    headers[key] = _this._customHeaders[key];
                                }
                                headers['Host'] = parsedUrl.host;
                                if (!headers['User-Agent']) {
                                    headers['User-Agent'] = 'fuxion-oauth2';
                                }
                                if (_this._authorizationInHeader) {
                                    headers[_this._accessTokenName] = _this.getAccessToken(params.access_token);
                                }
                                /** QueryString */
                                query = params || {};

                                (0, _assign2.default)(query, parsedUrl.query);
                                queryStr = _querystring2.default.stringify(query);

                                if (_this._authorizationInHeader) {
                                    delete query[_this._accessTokenName];
                                }
                                _convertBodyAsContent = convertBodyAsContentType(body, headers), _convertBodyAsContent2 = (0, _slicedToArray3.default)(_convertBodyAsContent, 2), bodyString = _convertBodyAsContent2[0], realHeaders = _convertBodyAsContent2[1];
                                options = {
                                    host: parsedUrl.hostname,
                                    port: parsedUrl.port,
                                    path: parsedUrl.pathname + (queryStr ? '?' + queryStr : ''),
                                    method: method,
                                    headers: realHeaders
                                };

                                if (_this._agent) {
                                    options.agent = _this._agent;
                                }
                                _context.next = 17;
                                return executeAsync(http_library, options, bodyString);

                            case 17:
                                return _context.abrupt('return', _context.sent);

                            case 18:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, _this);
            }));

            return function (_x, _x2, _x3, _x4) {
                return _ref.apply(this, arguments);
            };
        }();

        this.getAuthorizeUrl = function (params) {
            var parameters = params || {};
            parameters[_this._clientIdName] = _this._clientId;
            if (_this._redirectUri) {
                parameters['redirect_uri'] = _this._redirectUri;
            }
            if (_this._responseType) {
                parameters['response_type'] = _this._responseType;
            }
            return _this.authorizeUrl + '?' + _querystring2.default.stringify(parameters);
        };

        this.getOAuthAccessToken = function () {
            var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(params) {
                var parameters, _ref3, _ref4, data, res;

                return _regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                parameters = params || {};

                                parameters[_this._clientIdName] = _this._clientId;
                                parameters[_this._clientSecretName] = _this._clientSecret;
                                if (_this._redirectUri) {
                                    parameters['redirect_uri'] = _this._redirectUri;
                                }
                                if (!params.grant_type) {
                                    params.grant_type = 'authorization_code';
                                }

                                if (!(params.grant_type === 'authorization_code' && !('code' in params))) {
                                    _context2.next = 7;
                                    break;
                                }

                                throw new Error('It\'s required for param `code`');

                            case 7:
                                if (!(params.grant_type === 'refresh_token' && !('refresh_token' in params))) {
                                    _context2.next = 9;
                                    break;
                                }

                                throw new Error('It\'s required for param `refresh_token`');

                            case 9:
                                _context2.prev = 9;
                                _context2.next = 12;
                                return _this.request('POST', _this.accessTokenUrl, parameters, parameters);

                            case 12:
                                _ref3 = _context2.sent;
                                _ref4 = (0, _slicedToArray3.default)(_ref3, 2);
                                data = _ref4[0];
                                res = _ref4[1];
                                return _context2.abrupt('return', [JSON.parse(data), res]);

                            case 19:
                                _context2.prev = 19;
                                _context2.t0 = _context2['catch'](9);

                                console.error(_context2.t0);

                            case 22:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, _this, [[9, 19]]);
            }));

            return function (_x5) {
                return _ref2.apply(this, arguments);
            };
        }();

        this.get = function () {
            var _ref5 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(url, params) {
                return _regenerator2.default.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                if ('access_token' in params) {
                                    _context3.next = 2;
                                    break;
                                }

                                throw new Error('access_token required');

                            case 2:
                                _context3.next = 4;
                                return _this.request('GET', url, params);

                            case 4:
                                return _context3.abrupt('return', _context3.sent);

                            case 5:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, _this);
            }));

            return function (_x6, _x7) {
                return _ref5.apply(this, arguments);
            };
        }();

        this.post = function () {
            var _ref6 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4(url, params, body) {
                return _regenerator2.default.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                if ('access_token' in params) {
                                    _context4.next = 2;
                                    break;
                                }

                                throw new Error('access_token required');

                            case 2:
                                _context4.next = 4;
                                return _this.request('POST', url, params, body);

                            case 4:
                                return _context4.abrupt('return', _context4.sent);

                            case 5:
                            case 'end':
                                return _context4.stop();
                        }
                    }
                }, _callee4, _this);
            }));

            return function (_x8, _x9, _x10) {
                return _ref6.apply(this, arguments);
            };
        }();

        if (clientId instanceof Object) {
            this._clientIdName = (0, _keys2.default)(clientId)[0];
            this._clientId = (0, _values2.default)(clientId)[0];
        } else {
            this._clientId = clientId;
        }
        if (clientSecret instanceof Object) {
            this._clientSecretName = (0, _keys2.default)(clientSecret)[0];
            this._clientSecret = (0, _values2.default)(clientSecret)[0];
        } else {
            this._clientSecret = clientSecret;
        }
        this._urlRoot = urlRoot || '';
        this._authorizeUrl = authorizePath || this._authorizeUrl;
        this._accessTokenUrl = accessTokenPath || this._accessTokenUrl;
    }

    (0, _createClass3.default)(OAuth2Client, [{
        key: 'headers',
        set: function set(headers) {
            this._customHeaders = headers;
        }
    }, {
        key: 'responseType',
        set: function set(responseType) {
            this._responseType = responseType;
        }
    }, {
        key: 'clientIdName',
        set: function set(clientIdName) {
            this._clientIdName = clientIdName;
        }
    }, {
        key: 'clientSecretName',
        set: function set(clientSecretName) {
            this._clientSecretName = clientSecretName;
        }
    }, {
        key: 'redirectUri',
        set: function set(redirectUri) {
            this._redirectUri = redirectUri;
        }
    }, {
        key: 'agent',
        set: function set(agent) {
            this._agent = agent;
        }
    }, {
        key: 'accessTokenName',
        set: function set(accessTokenName) {
            this._accessTokenName = accessTokenName;
        }
    }, {
        key: 'tokenType',
        set: function set(tokenType) {
            this._tokenType = tokenType;
        }
    }, {
        key: 'authorizationInHeader',
        set: function set(authorizationInHeader) {
            this._authorizationInHeader = authorizationInHeader;
        }
    }, {
        key: 'type',
        set: function set(type) {
            this._type = type;
        },
        get: function get() {
            return this._type;
        }
    }, {
        key: 'key',
        set: function set(key) {
            this._key = key;
        },
        get: function get() {
            return this._key;
        }
    }, {
        key: 'clientId',
        get: function get() {
            return this._clientId;
        }
    }, {
        key: 'authorizeUrl',
        get: function get() {
            return this._urlRoot + this._authorizeUrl;
        }
    }, {
        key: 'accessTokenUrl',
        get: function get() {
            return this._urlRoot + this._accessTokenUrl;
        }
    }]);
    return OAuth2Client;
}();

exports.default = OAuth2Client;